#!/bin/bash

# Useful info found at http://www.linuxjournal.com/content/more-using-bash-complete-command

function ensure_fresh_semtech_images() {
    if test -f "/tmp/mu-semte.ch.images"; then
        # check if the images cache is less than 20 hrs old
        if test `find "/tmp/mu-semte.ch.images" -mmin +1200`
        then
            get_mu_info_images &
        fi
    else
        get_mu_info_images &
    fi
}

function get_revisions_for_service() {
    service=$1
    revision_link=$2

    tag_list=""
    tags=`curl -s https://info.mu.semte.ch$revision_link | jq '.data[].attributes.version'`
    for tag in $(echo "$tags" | jq '.'); do
        stripped_tag="${tag:1:-1}"
        tag_list="$tag_list $stripped_tag"
    done

    echo "$tag_list" > /tmp/mu-semte.ch.$service.tags
}

function get_mu_info_images() {
    images_array=`curl -s https://info.mu.semte.ch/microservices | jq '.data[]'`

    ac_image_list=""
    # all i want is 2 properties out of the object that gets parsed by jq
    # TODO to this less ugly
    for image in $(echo "$images_array" | jq '. | "\(.attributes.title)!\(.relationships.revisions.links.related)"'); do
        image_title_quoted=${image%!*}
        image_title="${image_title_quoted:1}"
        revision_link_quoted=${image#*!}
        revision_link="${revision_link_quoted::-1}"

        # add the image title to the list of images
        ac_image_list="$ac_image_list $image_title"
        # populate the revisions file
        get_revisions_for_service $image_title $revision_link
    done

    echo "$ac_image_list" > /tmp/mu-semte.ch.images
}

function ensure_fresh_image_tags() {
    IMAGE=$1
    # check that the file exists
    if test -f "/tmp/mu-semte.ch.$IMAGE.tags"; then
        true
    else
        get_mu_info_images &
    fi
    # check if the tags cache for the passed image cache is less than 20 hrs old
    if test `find "/tmp/mu-semte.ch.$IMAGE.tags" -mmin +1200`
    then
        get_mu_info_images &
    fi
}

ensure_fresh_semtech_images

mu_complete() {
    local cmd="${1##*/}"
    local word=${COMP_WORDS[COMP_CWORD]}
    local line=${COMP_LINE}
    local words=($line) # split line into words
    local lastchar="${line: -1}"
    local wordcount=${#words[@]}

    # echo "Words is ${words[0]},${words[1]},${words[2]},${words[3]},${words[4]} !!"

    # echo "Word two is '${words[2]}'"

    case ${words[1]} in
        project)
            case ${words[2]} in
                new)
                    ;;
                doc)
                    ;;
                add)
                    case ${words[3]} in
                        service)
                            if (( COMP_CWORD > 4 )); then
                                IMAGE=${words[4]}
                                ensure_fresh_image_tags $IMAGE
                                ac_tag_list=$(</tmp/mu-semte.ch.$IMAGE.tags)
                                COMPREPLY=(`compgen -W "$ac_tag_list" $word`)
                            else
                                ensure_fresh_semtech_images
                                ac_image_list=$(</tmp/mu-semte.ch.images)
                                COMPREPLY=(`compgen -W "$ac_image_list" $word`)
                            fi
                            ;;
                        *)
                            COMPREPLY=(`compgen -W "service" $word`)
                            ;;
                    esac
                    ;;
                *)
                    COMPREPLY=(`compgen -W "new doc add" $word`)
                    ;;
            esac
            ;;
        service)
            case ${words[2]} in
                new)
                    case ${words[3]} in
                        ruby)
                            ;;
                        javascript)
                            ;;
                        *)
                            COMPREPLY=(`compgen -W "ruby javascript" $word`)
                            ;;
                    esac
                    ;;
                *)
                    COMPREPLY=(`compgen -W "new" $word`)
                    ;;
            esac
            ;;
        migration)
            case ${words[2]} in
                new)
                    ;;
                *)
                COMPREPLY=(`compgen -W "new" $word`)
            esac
            ;;
        *)
            COMPREPLY=(`compgen -W "project service migration" $word`)
            ;;
    esac
}

complete -F mu_complete mu
